/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 16 18:57:58 GMT 2024
 */

package org.example.evosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.evosuite.Calculator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CalculatorTest extends Calculator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00()  throws Throwable  {
        Calculator calculator0 = new Calculator();
        int int0 = calculator0.gcd((-2024892431), (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test01()  throws Throwable  {
        Calculator calculator0 = new Calculator();
        int int0 = calculator0.lcm((-1703), (-112));
        assertEquals((-190736), int0);
    }

    @Test(timeout = 4000)
    public void test02()  throws Throwable  {
        Calculator calculator0 = new Calculator();
        boolean boolean0 = calculator0.isPrime(75217861);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03()  throws Throwable  {
        Calculator calculator0 = new Calculator();
        long long0 = calculator0.factorial(43);
        assertEquals((-7904866829883932672L), long0);
    }

    @Test(timeout = 4000)
    public void test04()  throws Throwable  {
        Calculator calculator0 = new Calculator();
        boolean boolean0 = calculator0.isEven((-3124));
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05()  throws Throwable  {
        Calculator calculator0 = new Calculator();
        double double0 = calculator0.power((-2779), 192);
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06()  throws Throwable  {
        Calculator calculator0 = new Calculator();
        int int0 = calculator0.abs(75217861);
        assertEquals(75217861, int0);
    }

    @Test(timeout = 4000)
    public void test07()  throws Throwable  {
        Calculator calculator0 = new Calculator();
        double double0 = calculator0.sqrt(1);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08()  throws Throwable  {
        Calculator calculator0 = new Calculator();
        double double0 = calculator0.divide((-1291), (-1921846835));
        assertEquals(6.717496818626547E-7, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09()  throws Throwable  {
        Calculator calculator0 = new Calculator();
        int int0 = calculator0.multiply((-305), 828);
        assertEquals((-252540), int0);
    }

    @Test(timeout = 4000)
    public void test10()  throws Throwable  {
        Calculator calculator0 = new Calculator();
        int int0 = calculator0.subtract((-1), (-2024892431));
        assertEquals(2024892430, int0);
    }

    @Test(timeout = 4000)
    public void test11()  throws Throwable  {
        Calculator calculator0 = new Calculator();
        int int0 = calculator0.add(0, (-6563));
        assertEquals((-6563), int0);
    }
}
